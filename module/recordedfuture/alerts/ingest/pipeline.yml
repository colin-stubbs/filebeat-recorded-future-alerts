description: Pipeline for parsing Recorded Future alerts from Connect API.
processors:
  #
  # Safeguard against feeding the pipeline with documents other
  # that the ones generated by Filebeat's httpjson input.
  #
  - fail:
      if: 'ctx.json == null || !(ctx.json instanceof Map)'
      message: 'missing json object in input document'

  #
  # Set basic ECS fields.
  #
  - set:
      field: event.ingested
      value: '{{{ _ingest.timestamp }}}'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: info
  - set:
      field: rule.description
      value: '{{{ json.title }}}'
  - set:
      field: rule.id
      value: '{{{ json.rule.id }}}'
  - set:
      field: rule.name
      value: '{{{ json.rule.name }}}'
  - set:
      field: rule.reference
      value: '{{{ json.rule.url }}}'


  #
  # Map alert triggered date/time to @timestamp
  #
  - date:
      field: json.triggered
      target_field: '@timestamp'
      formats:
        - ISO8601
      if: 'ctx.json.triggered != null'
      on_failure:
        - append:
            field: error.message
            value: 'Error parsing triggered field value "{{{ json.triggered }}}": {{{ _ingest.on_failure_message }}}'

  - set:
      field: event.reference
      value: '{{{ json.url }}}'
      ignore_empty_value: true

  #
  # Remove fields converted to an ECS field.
  #
  - remove:
      field:
        - json.triggered
        - json.title
        - json.rule.id
        - json.rule.name
        - json.rule.url
        - message
      ignore_missing: true

  #
  # Save fields without an ECS mapping under `fields.recordedfuture.alert`.
  #
  - rename:
      field: json
      target_field: fields.recordedfuture.alert

on_failure:
  - append:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
